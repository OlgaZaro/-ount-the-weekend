/* Метод isWeekend должен определять, относится ли параметр dateTime к выходным.
Считаем выходными промежуток между 22:00 пятницы (включительно) и 23:00 воскресенья (не включительно)*/

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;


public class Solution {

    private static final int FRIDAY = 5;
    private static final int SATURDAY = 6;
    private static final int SUNDAY = 7;
    private static final int WEEKEND_START_FRIDAY_CUT_OFF_HOUR = 22;
    private static final int WEEKEND_END_SUNDAY_CUT_OFF_HOUR = 23;

    public static void main(String[] args) {
        List<LocalDateTime> dateTimeList = new ArrayList<>();
        dateTimeList.add(LocalDateTime.of(2016, 4, 22, 18, 39));
        dateTimeList.add(LocalDateTime.of(2016, 4, 22, 21, 59));
        dateTimeList.add(LocalDateTime.of(2016, 4, 22, 22, 0));
        dateTimeList.add(LocalDateTime.of(2016, 4, 23, 5, 0));
        dateTimeList.add(LocalDateTime.of(2016, 4, 24, 8, 0));
        dateTimeList.add(LocalDateTime.of(2016, 4, 24, 22, 59));
        dateTimeList.add(LocalDateTime.of(2016, 4, 24, 23, 0));
        dateTimeList.add(LocalDateTime.of(2016, 4, 25, 11, 5));

        for (LocalDateTime dateTime : dateTimeList) {
            System.out.println(dateTime + ", is weekend - " + isWeekend(dateTime));
        }
    }
    public static boolean isWeekend(LocalDateTime dateTime) {
        int Day = dateTime.getDayOfWeek().getValue();\\ Создаем переменную из перданного параметра, дня недели, полученного значения
        int Hour  = dateTime.getHour();\\ Создаем переменную из переданного парметра и часа
        
        //Фильтруем выходные

        return (Day == FRIDAY && Hour >= WEEKEND_START_FRIDAY_CUT_OFF_HOUR) ||
                Day == SATURDAY || 
               (Day == SUNDAY && Hour < WEEKEND_END_SUNDAY_CUT_OFF_HOUR);
        }
    }
